import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

apply plugin: 'com.android.model.application'

def timestamp() {
    def dateFormat = new SimpleDateFormat("yyyy-MM-dd-HHmm")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    return dateFormat.format(new Date())
}

def idForSimon() {
    try {
        def commit = new ByteArrayOutputStream()
        exec {
            // Require remote called simon because someone downstream might call my branch "upstream"
            commandLine 'git', 'merge-base', 'simon/master', 'master'
            standardOutput = commit
        }
        def shortUnique = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', commit.toString().trim()
            standardOutput = shortUnique
        }
        return shortUnique.toString().trim()
    } catch (ignored) {
        return "UNOFFICIAL"
    }
}

model {
    android {
        compileSdkVersion = 22
        buildToolsVersion = "22.0.1"

        defaultConfig.with {
            applicationId = "name.boyle.chris.sgtpuzzles"
            versionCode = 108
            versionName = "${timestamp()}-${idForSimon()}"
            targetSdkVersion.apiLevel = 22
            minSdkVersion.apiLevel = 7
        }
    }

    android.ndk {
        moduleName = "puzzles"
        CFlags += "-DANDROID -DSMALL_SCREEN -DSTYLUS_BASED -DNO_PRINTING -DCOMBINED"
        // WARNING abiFilters "all" here can end up omitting lib dir; I don't know why
    }

    fileTree(dir: 'src/main/jni', include: '*.c').each { File f ->
        def game = f.name.replace(".c", "")
        def text = f.text
        def match = text =~ /enum\s+\{\s*COL_[^,]+,\s*(COL_[^\}]+)\}/
        if (match) {
            def colours = match.group(1).replaceAll(/(?s)\/\*.*?\*\//, "").replaceAll(/#[^\n]*\n/, "")
                    .trim().split(",")*.trim()*.replaceFirst(/^COL_/, "")*.toLowerCase()
                    .findAll { it =~ /^[^=]+$/ } - ["ncolours", "crossedline"]
            if (colours.any { it =~ /[^a-z0-9_]/ }) {
                throw new GradleException("Couldn't parse colours for " + game + ": " + match.group(1) + " -> " + colours)
            }
//            resValue "string", game + "_colours", colours.join(',')
            println "\t<string translatable=\"false\" name=\"" + game + "_colours\">" + colours.join(',') + "</string>"
        }
    }

    android.buildTypes {
        debug {
            isJniDebuggable = true
        }
        release {
            isMinifyEnabled = true  // about to be renamed to minifyEnabled
            isJniDebuggable = false
            proguardFiles += file('proguard-rules.txt')
        }
    }

}

void buildExecutable(String abi, String debugOrRelease) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    def jniLibsDir = file('src/main/jniLibs/' + abi)
    def soFolder = file('build/intermediates/binaries/' + debugOrRelease + '/lib/' + abi)
    def objFolder = file('build/intermediates/binaries/' + debugOrRelease + '/obj/' + abi)
    // library is built, now build the executables: copy libpuzzles aside...
    def prebuiltDir = file(objFolder.parent + '/prebuilt')
    def prebuiltAbiDir = file(prebuiltDir.absolutePath + '/' + abi)
    prebuiltAbiDir.mkdirs()
    def outDir = file(objFolder.parent + '/executables')
    def outAbiDir = file(outDir.absolutePath + '/' + abi)
    outAbiDir.mkdirs()
    copy {
        from(soFolder.absolutePath + '/libpuzzles.so')
        into prebuiltAbiDir
    }

    String abiParam = 'APP_ABI=' + abi

    // build the executables, with and without PIE
    //noinspection GroovyAssignabilityCheck
    def common = [
            ndkDir + (Os.isFamily(Os.FAMILY_WINDOWS) ? '/ndk-build.cmd' : '/ndk-build'),
            'NDK_PROJECT_PATH=null',
            'APP_BUILD_SCRIPT=' + file('src/main/executable.mk').absolutePath,
            'NDK_OUT=' + objFolder.absolutePath,
            'NDK_LIBS_OUT=' + outDir.absolutePath,
            'PUZZLES_PREBUILT_DIR=' + prebuiltDir.absolutePath,
            abiParam,
            'NDK_LOG=1',
            'NDK_DEBUG=' + (('debug'.equals(debugOrRelease)) ? '1' : '0')]
    exec {
        commandLine common + [
                'APP_PLATFORM=android-9',  // 9 is earliest for x86 + mips
                'PUZZLESGEN_SUFFIX=-no-pie',
                'APP_PIE=false']
    }
    exec {
        commandLine common + [
                'APP_PLATFORM=android-16',  // earliest for PIE
                'PUZZLESGEN_SUFFIX=-with-pie',
                'APP_PIE=true']
    }

    // rename to look like libraries, to get them installed
    copy {
        from(outAbiDir) {
            include 'puzzlesgen-*'
            rename 'puzzlesgen-(.*)', 'libpuzzlesgen-$1.so'
        }
        into jniLibsDir
    }
}

def ABIs = ["arm64-v8a", "armeabi", "armeabi-v7a", "mips", "mips64", "x86", "x86_64"]

task "buildGameGenerationExecutableDebug" << {
    for (String abi : ABIs) {
        buildExecutable(abi, "debug")
    }
}
task "buildGameGenerationExecutableRelease" << {
    for (String abi : ABIs) {
        buildExecutable(abi, "release")
    }
}

dependencies {
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:gridlayout-v7:22.2.1'
    compile 'com.android.support:support-annotations:22.2.1'
}
